TCPClient client;

//State variables
int motorState = 0;
int switchState = 0;
int motionState = 0;
int dimPercentLight = 0;
int dimPercentLED = 0;

//Pins
int LEDSTRIP = A0;
int ZEROCROSS = D1;
int MOTION = D0;
int MOTOR = D2;
int HVDIM = A1;
int SWITCH = D3;

byte timeServer[] = {50, 63, 202, 26};

//Functional prototypes
String getValue(String data, char separator, int index);
void motorOn();
void fade(String command);
void setup();
void getTime(String &hour, String &minute, String &second);
void loop();

String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = {0, -1};
  int maxIndex = data.length()-1;

  for(int i=0; i<=maxIndex && found<=index; i++){
    if(data.charAt(i) == separator || i == maxIndex){
        found++;
        strIndex[0] = strIndex[1]+1;
        strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }

  return found>index ? data.substring(strIndex[0], strIndex[1]) : "";
}



int motorOn(String command) {
    if (command = "motorOn"){
        digitalWrite(MOTOR, HIGH);
        delay(5000);
        digitalWrite(MOTOR, LOW);
          
        if (motorState == 0) {
            motorState = 1;
        } else {
            motorState = 0;
        }
        return 1;
    }
    return -1;

}

void hitSwitch(){
    if (digitalRead(SWITCH) == HIGH){
        fade("255,20,A");
        fade("255,20,B");
    } else {
        fade("0,20,A");
        fade("0,20,B");
    }
    
}

void fade(String command){
    String percent = getValue(command, ',', 0);
    String fadeTime = getValue(command, ',', 1);
    String id = getValue(command, ',', 2);
    Serial.println(percent + " " + fadeTime + " " + id);
}

///////////////////////////////////////////SETUP////////////
void setup(){
    delay(5000);
  pinMode(LEDSTRIP, OUTPUT);
  pinMode(ZEROCROSS, INPUT);
  pinMode(MOTION, INPUT);
  pinMode(MOTOR, OUTPUT);
  pinMode(HVDIM, INPUT);
  pinMode(SWITCH, INPUT);
  Serial.begin(9600);

    Spark.function("motorOn", motorOn);
    //Spark.function("fade", fade);
  Spark.variable("motorState", &motorState, INT);
  Spark.variable("switchState", &switchState, INT);
  Spark.variable("motionState", &motionState, INT);
  Spark.variable("dimPercentLight", &dimPercentLight, INT);
  Spark.variable("dimPercentLED", &dimPercentLED, INT);

  //setup
  if (client.connect(timeServer, 80)) {
    Serial.println("connected");
    client.println("GET utc/now?\\H:\\M:\\S");
    client.println();
  }  else {
    Serial.println("connection failed");
  }
}


// int[] getTime(){
//   String timeString = client.read("GET utc/now?\\H:\\M:\\S");
// //  int[] curTime = new int[3];
//   int curTime[3];
//   curTime[0] = getValue(timeString, ":", 0);
//   curTime[1] = getValue(timeString, ":", 1);
//   curTime[2] = getValue(timeString, ":", 2);
//   return curTime;
// }

void getTime(String &hour, String &minute, String &second){
//  String timeString = client.read("GET utc/now?\\H:\\M:\\S");
  String timeString = "12:04:30";
  //int[] curTime = new int[3];
  hour = getValue(timeString, ':', 0);
  minute = getValue(timeString, ':', 1);
  second = getValue(timeString, ':', 2);
}

/////////////////////////////////LOOP//////////////////
void loop(){
  fade("percentage,time,ID");
  Serial.println("Boat!");

  // if (SWITCH == HIGH) {
  //   /* code */
  // } else if (SWITCH == LOW) {
  //   /* code */
  // } else if (MOTION == HIGH) {
  //   /* code */
  // } else if (MOTION == LOW) {
  //   /* code */
  // } else if (ZEROCROSS == HIGH) {
  //   /* code */
  // } else if (ZEROCROSS == LOW) {
  //   /* code */
  // }

    if (client.connect(timeServer, 80)) {
    Serial.println("connected");
    motorOn("motorOn");
    hitSwitch();
    // String hour;
    // String minute;
    // String second;
    // getTime(hour, minute, second);
    // Serial.println(hour + " " +  minute + " " + second);
    
    //client.println("GET utc/now?\\H:\\M:\\S");
  }  else {
    Serial.println("connection failed");
  }
}



// //loop
// if (client.available()) {
//   char c = client.read();
//   Serial.print(c);
// }

// if (!client.connected()) {
//   Serial.println();
//   Serial.println("disconnecting.");
//   client.stop();
// }