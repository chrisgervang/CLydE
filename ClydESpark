
//TODO:
//finish fade
//write setLightLevel
//test evrything :D
//dot i cross t

TCPClient client;

//State variables

int zeroCrossState = 0;
int motorState = 0;
int switchState = 0;
int motionState = 0;
int dimPercentLight = 0;
int dimPercentLED = 0;

//Pins
int LEDSTRIP = A0;
int ZEROCROSS = D1;
int MOTION = D0;
int MOTOR = D2;
int HVDIM = A1;
int SWITCH = D3;

byte timeServer[] = {50, 63, 202, 26};

//Functional prototypes
String getValue(String data, char separator, int index);
int motorOn(String args);
int fade(String args);
int setFade(String args);
void setup();
void getTime(String &hour, String &minute, String &second);
int hitSwitch();
void nightLight();
void loop();

String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = {0, -1};
  int maxIndex = data.length()-1;

  for(int i=0; i<=maxIndex && found<=index; i++){
    if(data.charAt(i) == separator || i == maxIndex){
        found++;
        strIndex[0] = strIndex[1]+1;
        strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }

  return found>index ? data.substring(strIndex[0], strIndex[1]) : "";
}



int motorOn(String args) {
    if (args = "motorOn"){
        digitalWrite(MOTOR, HIGH);
        delay(5000);
        digitalWrite(MOTOR, LOW);
          
        if (motorState == 0) {
            motorState = 1;
        } else {
            motorState = 0;
        }
        return 1;
    }
    return -1;

}

int fade(String args){
    String percent = getValue(args, ',', 0);
    String fadeTime = getValue(args, ',', 1);
    String id = getValue(args, ',', 2);
    //Serial.println(percent + " " + fadeTime + " " + id);
    int percentI = percent.toInt();
    int fadeTimeI = fadeTime.toInt();
    if(dimPercentLight < percentI) {
        for(int fadeValue = dimPercentLight ; fadeValue <= 255; fadeValue +=1) { 
        // sets the value (range from 0 to 255):
        analogWrite(LEDSTRIP, fadeValue);         
        // wait for 30 milliseconds to see the dimming effect    
        delay(fadeTimeI);                            
      }
      return 1;
    } else if (dimPercentLight > percentI) {
         for(int fadeValue = dimPercentLight ; fadeValue >= 0; fadeValue -=1) { 
        // sets the value (range from 0 to 255):
        analogWrite(LEDSTRIP, fadeValue);         
        // wait for 30 milliseconds to see the dimming effect    
        delay(fadeTimeI); 
         }
         return 1;
    }
    return -1;
}

int setFade(String args){
    String percent = getValue(args, ',', 0);
    String id = getValue(args, ',', 1);
    int percentI = percent.toInt();

    if (id == "A"){
        if (dimPercentLight != percentI){
            analogWrite(LEDSTRIP, percentI);
        }
      return 1;
    } else { //id == "B"
        //Setting light
      return 1;
    }
    return -1;
}

int hitSwitch(){
    if (switchState == 1){
        fade("255,20,A");
        fade("255,20,B");
        return 1;
    } else {
        fade("0,20,A");
        fade("0,20,B");
        return 0;
    }
    
}

//Motion detector
void nightLight(){
    if (motionState == 1){
        fade("13,20,A");
        fade("13,20,B");
        delay(10000);
        if (motionState == 0) {
            fade("0,20,A");
            fade("0,20,B");
        }
    }
}


///////////////////////////////////////////SETUP////////////
void setup(){
    delay(5000);
  pinMode(LEDSTRIP, OUTPUT);
  pinMode(ZEROCROSS, INPUT);
  pinMode(MOTION, INPUT);
  pinMode(MOTOR, OUTPUT);
  pinMode(HVDIM, INPUT);
  pinMode(SWITCH, INPUT);
  Serial.begin(9600);

    Spark.function("motorOn", motorOn);
    Spark.function("fade", fade);
    Spark.function("setFade", setFade);
  Spark.variable("motorState", &motorState, INT);
  Spark.variable("switchState", &switchState, INT);
  Spark.variable("motionState", &motionState, INT);
  Spark.variable("dimPercentLight", &dimPercentLight, INT);
  Spark.variable("dimPercentLED", &dimPercentLED, INT);

  //setup
  if (client.connect(timeServer, 80)) {
    Serial.println("connected");
    client.println("GET utc/now?\\H:\\M:\\S");
    client.println();
  }  else {
    Serial.println("connection failed");
  }
}


// int[] getTime(){
//   String timeString = client.read("GET utc/now?\\H:\\M:\\S");
// //  int[] curTime = new int[3];
//   int curTime[3];
//   curTime[0] = getValue(timeString, ":", 0);
//   curTime[1] = getValue(timeString, ":", 1);
//   curTime[2] = getValue(timeString, ":", 2);
//   return curTime;
// }

void getTime(String &hour, String &minute, String &second){
//  String timeString = client.read("GET utc/now?\\H:\\M:\\S");
  String timeString = "12:04:30";
  //int[] curTime = new int[3];
  hour = getValue(timeString, ':', 0);
  minute = getValue(timeString, ':', 1);
  second = getValue(timeString, ':', 2);
}

/////////////////////////////////LOOP//////////////////
void loop(){
  //fade("percentage,time,ID");
  //Serial.println("Boat!");

  if (digitalRead(SWITCH) == HIGH) {
    switchState = true;
  } else if (digitalRead(SWITCH) == LOW) {
    switchState = false;
  } else if (digitalRead(MOTION) == HIGH) {
    motionState = true;
  } else if (digitalRead(MOTION) == LOW) {
    motionState = false;
  } else if (digitalRead(ZEROCROSS) == HIGH) {
    zeroCrossState = true;
  } else if (digitalRead(ZEROCROSS) == LOW) {
    zeroCrossState = false;
  }
  //   if (client.connect(timeServer, 80)) {
  //   Serial.println("connected");
  //   motorOn("motorOn");
  //   hitSwitch();
  //   // String hour;
  //   // String minute;
  //   // String second;
  //   // getTime(hour, minute, second);
  //   // Serial.println(hour + " " +  minute + " " + second);
    
  //   //client.println("GET utc/now?\\H:\\M:\\S");
  // }  else {
  //   Serial.println("connection failed");

  // }
}


// //loop
// if (client.available()) {
//   char c = client.read();
//   Serial.print(c);
// }

// if (!client.connected()) {
//   Serial.println();
//   Serial.println("disconnecting.");
//   client.stop();
// }
